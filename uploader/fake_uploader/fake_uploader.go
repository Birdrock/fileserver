// This file was generated by counterfeiter
package fake_uploader

import (
	"net/http"
	"net/url"
	"sync"
	"time"

	"github.com/cloudfoundry-incubator/file-server/uploader"
)

type FakeUploader struct {
	UploadStub        func(u *url.URL, filename string, r *http.Request) (*http.Response, *url.URL, error)
	uploadMutex       sync.RWMutex
	uploadArgsForCall []struct {
		u        *url.URL
		filename string
		r        *http.Request
	}
	uploadReturns struct {
		result1 *http.Response
		result2 *url.URL
		result3 error
	}
	PollStub        func(u *url.URL, res *http.Response, closeChan <-chan bool, interval time.Duration) error
	pollMutex       sync.RWMutex
	pollArgsForCall []struct {
		u         *url.URL
		res       *http.Response
		closeChan <-chan bool
		interval  time.Duration
	}
	pollReturns struct {
		result1 error
	}
}

func (fake *FakeUploader) Upload(u *url.URL, filename string, r *http.Request) (*http.Response, *url.URL, error) {
	fake.uploadMutex.Lock()
	fake.uploadArgsForCall = append(fake.uploadArgsForCall, struct {
		u        *url.URL
		filename string
		r        *http.Request
	}{u, filename, r})
	fake.uploadMutex.Unlock()
	if fake.UploadStub != nil {
		return fake.UploadStub(u, filename, r)
	} else {
		return fake.uploadReturns.result1, fake.uploadReturns.result2, fake.uploadReturns.result3
	}
}

func (fake *FakeUploader) UploadCallCount() int {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return len(fake.uploadArgsForCall)
}

func (fake *FakeUploader) UploadArgsForCall(i int) (*url.URL, string, *http.Request) {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.uploadArgsForCall[i].u, fake.uploadArgsForCall[i].filename, fake.uploadArgsForCall[i].r
}

func (fake *FakeUploader) UploadReturns(result1 *http.Response, result2 *url.URL, result3 error) {
	fake.UploadStub = nil
	fake.uploadReturns = struct {
		result1 *http.Response
		result2 *url.URL
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUploader) Poll(u *url.URL, res *http.Response, closeChan <-chan bool, interval time.Duration) error {
	fake.pollMutex.Lock()
	fake.pollArgsForCall = append(fake.pollArgsForCall, struct {
		u         *url.URL
		res       *http.Response
		closeChan <-chan bool
		interval  time.Duration
	}{u, res, closeChan, interval})
	fake.pollMutex.Unlock()
	if fake.PollStub != nil {
		return fake.PollStub(u, res, closeChan, interval)
	} else {
		return fake.pollReturns.result1
	}
}

func (fake *FakeUploader) PollCallCount() int {
	fake.pollMutex.RLock()
	defer fake.pollMutex.RUnlock()
	return len(fake.pollArgsForCall)
}

func (fake *FakeUploader) PollArgsForCall(i int) (*url.URL, *http.Response, <-chan bool, time.Duration) {
	fake.pollMutex.RLock()
	defer fake.pollMutex.RUnlock()
	return fake.pollArgsForCall[i].u, fake.pollArgsForCall[i].res, fake.pollArgsForCall[i].closeChan, fake.pollArgsForCall[i].interval
}

func (fake *FakeUploader) PollReturns(result1 error) {
	fake.PollStub = nil
	fake.pollReturns = struct {
		result1 error
	}{result1}
}

var _ uploader.Uploader = new(FakeUploader)
